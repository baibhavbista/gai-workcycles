import { app, BrowserWindow, Tray, Menu, globalShortcut, nativeImage, ipcMain } from 'electron';
import path from 'node:path';
import {
  insertSession,
  insertCycle,
  finishCycle,
  getSessionById,
  SessionPayload,
  CycleStartPayload,
  CycleFinishPayload,
} from './db';
import { setupVectorTable, indexCycleEmbedding, searchSimilar } from './vector';

// NOTE: This is an early scaffold. Additional tray, global shortcuts, IPC, and
// database logic will be added in subsequent phases.

let win: BrowserWindow | null = null;
let tray: Tray | null = null;

const ICON_PATH = path.join(__dirname, 'assets', 'iconTemplate.png');

function createWindow() {
  win = new BrowserWindow({
    width: 480,
    height: 1000,
    frame: true,
    roundedCorners: true,
    resizable: true,
    webPreferences: {
      preload: path.join(__dirname, 'preload.cjs'),
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  const isDev = process.env.NODE_ENV === 'dev';

  if (isDev) {
    // During dev we load the Vite dev server. Make sure the port matches the
    // one used in package.json scripts (5173 by default).
    win.loadURL('http://localhost:5173');
    win.webContents.openDevTools({ mode: 'detach' });
  } else {
    // In production, load the packaged index.html generated by Vite.
    win.loadFile(path.join(__dirname, '../dist/index.html'));
  }

  win.on('closed', () => {
    win = null;
  });
}

function toggleWindow() {
  if (!win) return;
  if (win.isVisible()) {
    win.hide();
  } else {
    win.show();
  }
}

function createTray() {
  let iconImage = nativeImage.createEmpty();
  try {
    const loaded = nativeImage.createFromPath(ICON_PATH);
    if (!loaded.isEmpty()) {
      iconImage = loaded;
    }
  } catch {
    // ignore, fallback to empty image
  }

  tray = new Tray(iconImage);
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Open WorkCycles', click: () => toggleWindow() },
    { type: 'separator' },
    { label: 'Quit', click: () => app.quit() },
  ]);
  tray.setToolTip('WorkCycles');
  tray.setContextMenu(contextMenu);

  // On click, toggle visibility
  tray.on('click', () => toggleWindow());
}

app.whenReady().then(async () => {
  await setupVectorTable();
  createWindow();
  createTray();

  // Register global shortcut Ctrl+Shift+U
  const success = globalShortcut.register('Control+Shift+U', () => {
    toggleWindow();
  });

  if (!success) {
    // eslint-disable-next-line no-console
    console.warn('Global shortcut registration failed');
  }
});

// On macOS, recreate window when dock icon is clicked and there are no other
// windows open.
app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Quit the app when all windows are closed (except on macOS where apps
// generally stay open until the user explicitly quits).
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('will-quit', () => {
  // Unregister all shortcuts.
  globalShortcut.unregisterAll();
});

// ---------- IPC handlers ----------

ipcMain.handle('wc:session-create', (_, payload: SessionPayload) => {
  return insertSession(payload);
});

ipcMain.handle('wc:cycle-start', async (_, payload: CycleStartPayload) => {
  const id = insertCycle(payload);
  // Fire and forget embedding indexing
  indexCycleEmbedding({
    cycleId: id,
    text: payload.goal,
    energy: payload.energy,
    morale: payload.morale,
  });
  return id;
});

ipcMain.handle('wc:cycle-finish', (_, payload: CycleFinishPayload) => {
  finishCycle(payload);
  return { ok: true };
});

ipcMain.handle('wc:get-session', (_, sessionId: string) => {
  return getSessionById(sessionId);
});

ipcMain.handle('wc:vector-search', async (_, query: string, k = 5) => {
  return searchSimilar(query, k);
}); 